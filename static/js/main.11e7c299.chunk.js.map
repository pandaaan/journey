{"version":3,"sources":["images sync nonrecursive /.(png|jpe?g|svg)$","images/IMG_20190806_205106.jpg","images/kroatien1.jpg","App.js","serviceWorker.js","index.js","images/IMG_20190729_214910.jpg"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","listOfImages","App","r","this","importAll","require","Container","className","Row","Col","xs","Card","Image","src","lastdestimg","ImgOverlay","Title","Text","image","index","key","alt","class","icon","faBuilding","faCompass","faHeart","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oKAAA,IAAIA,EAAM,CACT,4BAA6B,EAC7B,4BAA6B,GAC7B,kBAAmB,IAIpB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,mBCxBpBU,EAAOC,QAAU,IAA0B,iD,mBCA3CD,EAAOC,QAAU,IAA0B,uC,kNCMvCC,EAAe,GA2DJC,E,kLAtDHC,GACR,OAAOA,EAAEP,OAAOV,IAAIiB,K,2CAGpBF,EAAeG,KAAKC,UAAUC,S,+BAG9B,OACE,kBAACC,EAAA,EAAD,KACE,uBAAGC,UAAU,gBAAb,YAEA,uBAAGA,UAAU,iBAAb,oBACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIH,UAAU,iBACrB,kBAACI,EAAA,EAAD,CAAMJ,UAAU,8BACd,kBAACK,EAAA,EAAD,CAAOC,IAAKC,IAAaP,UAAU,kBACnC,kBAACI,EAAA,EAAKI,WAAN,CAAiBR,UAAU,uDACzB,kBAACI,EAAA,EAAKK,MAAN,gBACA,kBAACL,EAAA,EAAKM,KAAN,sCAKR,6BAfF,IAeS,6BACP,uBAAGV,UAAU,iBAAb,oBACA,yBAAKA,UAAU,2DAA2DnB,GAAG,WAEzEY,EAAaf,KACX,SAACiC,EAAOC,GAAR,OACE,yBAAKZ,UAAU,mBACb,yBAAKa,IAAKD,EAAON,IAAKK,EAAOX,UAAU,0BAA0Bc,IAAI,mBAW/E,4BAAQC,MAAM,UACZ,yBAAKA,MAAM,wDACT,yBAAKf,UAAU,iBAAf,IAAgC,+BAAI,kBAAC,IAAD,CAAiBgB,KAAMC,QAC3D,yBAAKjB,UAAU,UAAf,IAAyB,+BAAI,kBAAC,IAAD,CAAiBgB,KAAME,QACpD,yBAAKlB,UAAU,UAAf,IAAyB,+BAAI,kBAAC,IAAD,CAAiBgB,KAAMG,e,GA/C9CC,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BjD,EAAOC,QAAU,IAA0B,kD","file":"static/js/main.11e7c299.chunk.js","sourcesContent":["var map = {\n\t\"./IMG_20190729_214910.jpg\": 9,\n\t\"./IMG_20190806_205106.jpg\": 34,\n\t\"./kroatien1.jpg\": 35\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 33;","module.exports = __webpack_public_path__ + \"static/media/IMG_20190806_205106.5dd002bb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kroatien1.c72f6613.jpg\";","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeart, faBuilding, faCompass } from '@fortawesome/free-regular-svg-icons';\nimport './App.scss';\nimport { Container, Row, Col, Image, Card } from 'react-bootstrap';\nimport lastdestimg from './images/IMG_20190729_214910.jpg';\nvar listOfImages = [];\n\n\nclass App extends React.Component {\n\n  importAll(r) {\n    return r.keys().map(r);\n  }\n  componentWillMount() {\n    listOfImages = this.importAll(require.context('./images/', false, /\\.(png|jpe?g|svg)$/));\n  }\n  render() {\n    return (\n      <Container>\n        <p className=\"header-Title\">My Trips</p>\n\n        <p className=\"mini-headline\">last destination</p>\n        <Row >\n          <Col xs={12} className=\"last-dest-col\">\n            <Card className=\" last-dest-card text-white\">\n              <Image src={lastdestimg} className=\"last-dest-img\" />\n              <Card.ImgOverlay className=\"text-overlay d-flex flex-column justify-content-end\">\n                <Card.Title >Croatia</Card.Title>\n                <Card.Text>Pag, Zadar, Pula, Rovinj </Card.Text>\n              </Card.ImgOverlay>\n            </Card>\n          </Col>\n        </Row>\n        <br /> <br />\n        <p className=\"mini-headline\">beautiful cities</p>\n        <div className=\"beauti-citi-col d-flex justify-content-between scrollbar\" id=\"style-3\">\n          {\n            listOfImages.map(\n              (image, index) =>\n                <div className=\"beauti-citi-div\">\n                  <img key={index} src={image} className=\"img-fluid last-dest-img\" alt=\"beispiele\"></img>\n                </div>\n            )\n          }\n\n\n        </div>\n\n\n\n\n        <footer class=\"footer\">\n          <div class=\"container  navi-icon d-flex justify-content-between \">\n            <div className=\"a-menu active\"> <p> <FontAwesomeIcon icon={faBuilding} /></p></div>\n            <div className=\"a-menu\"> <p> <FontAwesomeIcon icon={faCompass} /></p></div>\n            <div className=\"a-menu\"> <p> <FontAwesomeIcon icon={faHeart} /></p></div>\n          </div>\n        </footer>\n      </Container>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/IMG_20190729_214910.e270f3d0.jpg\";"],"sourceRoot":""}